inTrain<-createDataPartition(y=Wage$age,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot = "pairs")
qplot(age,wage,color=jobclass,data=training)
qplot(age,wage,color=education,data=training)
qplot(age,wage,color=jobclass,data=training)
qplot(age,wage,color=education,data=training)
modFit<-train(wage~age+jobclass+education,method="lm",data=training)
finMod<-modFit$finalModel
print(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000100")
qplot(finMod$fitted.values,finMod$residuals,color=race,data=training)
plot(finMod$residuals,pch-19)
plot(finMod$residuals,pch=19)
plot(finMod$residuals,pch=19)
pred<-predict(modFit,testing)
qplot(wage,pred,color=year,)
qplot(wage,pred,color=year,data=testing)
?AppliedPredictiveModelling
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training
summary(training)
summary(training[1])
summary(testing[1])
ibrary(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$Superplasticizer
hist(training$Superplasticizer)
mean(training$Superplasticizer)
sd(training$Superplasticizer)
summary(training$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
adData
modelFit<-train(type~.,data=training,preProcess=c("center","scale"),method="glm")
preObj<-preProcess(training[,-80],method=c("BoxCox"))
M<-abs(cor(training))
preProc<-preProcess(log10(training)+1),method="pca",pcaComp=2)
preProc<-preProcess(log10(training[,])+1),method="pca",pcaComp=2)
ncol(training)
preProc<-preProcess(log10(training[,-130])+1),method="pca",pcaComp=2)
View(training)
preProc<-preProcess(log10(training[,-1])+1),method="pca",pcaComp=2)
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "glm", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "glm", thresh = 0.8)
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "glm", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "glm", thresh = 0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit<-train(training$diagnosis~.,method="glm",data=training)
modelFit
predictions<-predict(modelFit,newdata = training)
predictions
confusionMatrix(training$diagnosis,predict(modelFit,training))
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit<-train(training$diagnosis~.,method="glm",data=training)
predictions<-predict(modelFit,newdata = training)
predictions
confusionMatrix(training$diagnosis,predict(modelFit,training))
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
confusionMatrix(training$diagnosis~.,predict(modelFit,training))
confusionMatrix(diagnosis~.,predict(modelFit,training))
confusionMatrix(diagnosis~.,predict(modelFit,newdata=training))
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A1
A2
A2 <- C2$overall[1]
A1;A2
confusionMatrix(diagnosis~.,predict(modelFit,newdata=training))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
?train
modelFit<-train(diagnosis~.,method="glm",data=training, trControl = trainControl(preProcOptions = list(thresh = 0.8))
)
predictions <- predict(modelFit, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
library(devtools)
install.packages("Rtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("Rtools")
set.seed(13435)
x<-data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
x<-x[sample(1:5),];X$var2[c(1,3)]=NA
x<-x[sample(1:5),];x$var2[c(1,3)]=NA
x
x[,1]
x[,"var1"]
x[1:2,"var2"]
x[(x$var1<=3 & x$var3>11),]
x[(x$var1<=3 | x$var3>11),]
x[(x$var1<=3 | x$var3>15),]
x[which(x$var1>8)]
x[which(x$var1>8),]
x[which(x$var2>8),]
sort(x$var1)
sort(x$var1,decreasing = T)
sort(x$var1,na.last = T)
sort(x$var2,na.last = T)
x[order(x$var1),]
x[order(x$var1,decreasing = T),]
x[order(x$var1,x$var2),]
x[order(x$var2,x$var3),]
library(plyr)
arrange(x,var1)
arrange(x,desc(var1))
arrange(x,desc(var2))
x$var4<-rnorm(5)
x
x$var4<-rnorm(5L)
x
x$var4<-rnorm(5)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
?useNA
?"table"
read.csv("Restaurants.csv")
restData<-read.csv("Restaurants.csv")
quantile(restData$councilDistrict)
quantile(restData$councilDistrict,probs = c(0.5,0.75,0.9))
table(restData$zipCode, useNA = T)
table(restData$zipCode, useNA = "ifany")
table(restData$zipCode)
table(restData$councilDistrict,restData$zipCode)
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt<-xtabs(Freq~Gender,data = DF)
xt
xt<-xtabs(Freq~Gender+Admit,data = DF)
xt
summary(x)
summary(xt)
summary(DF)
xt<-xtabs(Freq~Gender+Dept,data = DF)
xt
data("warpbreaks")
DF = as.data.frame("warpbreaks")
summary(DF)
summary(DF)
DF = as.data.frame(warpbreaks)
summary(DF)
xt = xtabs(breaks~.,data = DF)
xt
xt = xtabs(breaks~.,data = warpbreaks)
xt
DF$replicate <- rep(1:3)
xt = xtabs(breaks~.,data = warpbreaks)
xt
DF$replicate <- rep(1:3,len=54)
xt = xtabs(breaks~.,data = wDF)
xt = xtabs(breaks~.,data = DF)
xt
xt = xtabs(wool~.,data = DF)
xt = xtabs(tension~.,data = DF)
DF
summary(DF)
xt = xtabs(replicate~.,data = DF)
xt
ftable(xt)
xt = xtabs(breaks~.,data = DF)
ftable(xt)
s1<-seq(1,10,by=2)
s1
s2<-seq(1,10,length=2)
s2<-seq(1,10,length=3)
s2
restData$zipWrong <- ifelse(restData$zipCode<0,T,F)
table(restData$zipWrong,restData$zipCode)
maximum.limit()
memory.limit()
lambda = 0.2
n = 40
nsims = 1:1000
set.seed(1359)
means <- data.frame(x = sapply(nsims, function(x) {mean(rexp(n, lambda))}))
head(means)
tail(means)
lambda = 0.2
n = 40
sims = 1000
set.seed(1357)
exp_dist <- function(n, lambda) #define the exponential distribution for this project
{
mean(rexp(n,lambda))
}
simulation <- data.frame(ncol=2,nrow=1000) #create a simulation data frame
names(simulation) <- c("Index","Mean") #naming columns
for (i in 1:sims)
{
simulation[i,1] <- i
simulation[i,2] <- exp_dist(n,lambda)
}
sample_mean <- mean(sim$Mean) #calculate sample mean
sample_mean <- mean(simulation$Mean) #calculate sample mean
sample_mean
theory_mean <- 1/lambda
theory_mean
hist(simulation$Mean,
breaks = 100,
prob = TRUE,
main="Exponential Distribution n = 1000",
xlab="Spread")
abline(v = theor_mean,
col= 3,
lwd = 2)
abline(v = sample_mean,
col = 2,
lwd = 2)
legend('topright', c("Sample Mean", "Theoretical Mean"),
bty = "n",
lty = c(1,1),
col = c(col = 3, col = 2))
theor_var <- ((1/lambda)^2)/40
sample_var <- var(sim$Mean)
theor_var <- ((1/lambda)^2)/40
sample_var <- var(sim$Mean)
sample_var
theory_var <- ((1/lambda)^2)/40
theory_var
sample_var <- var(simulation$Mean)
sample_var
theory_var <- ((1/lambda)^2)/40
theory_var
hist(simulation$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
xfit <- seq(min(simulation$Mean), max(simulation$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 3, lwd = 2)
legend('topright', c("Theoretical Curve"),
lty = 1,lwd = 2, bty = "n", col = 3)
hist(simulation$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
lines(density(simulation$Mean))
#abline(v = 1/lambda, col = 3)
xfit <- seq(min(simulation$Mean), max(simulation$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 4, lty = 2)
legend('topright', c("Simulated Values", "Theoretical Values"),
bty = "n", lty = c(1,2), col = c(4, 3))
abline(v = 1/lambda, col = 3)
hist(simulation$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
#lines(density(simulation$Mean))
#abline(v = 1/lambda, col = 3) #mean
xfit <- seq(min(simulation$Mean), max(simulation$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 4, lty = 2)
legend('topright', c("Simulated Values", "Theoretical Values"),
bty = "n", lty = c(1,2), col = c(4, 3))
legend('topright', c("Simulated Values", "Theoretical Values"),
bty = "n", lty = c(2,2), col = c(4, 3))
hist(simulation$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
#lines(density(simulation$Mean)) #simulation distribution
#abline(v = 1/lambda, col = 3) #mean
xfit <- seq(min(simulation$Mean), max(simulation$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 4, lty = 2)
legend('topright', c("Simulated Values", "Theoretical Values"),
bty = "n", lty = c(2,2), col = c(4, 3))
hist(simulation$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
lines(density(simulation$Mean)) #simulation distribution
#abline(v = 1/lambda, col = 3) #mean
xfit <- seq(min(simulation$Mean), max(simulation$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
#lines(xfit, yfit, pch = 22, col = 4, lty = 2)
legend('topright', c("Theoritical Values", "Simulation Values"),
bty = "n", lty = c(2,2), col = c(4, 3))
lines(xfit, yfit, pch = 22, col = 4, lty = 2)
abline(v = 1/lambda, col = 3) #mean
hist(simulation$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
lines(density(simulation$Mean)) #simulation distribution
abline(v = 1/lambda, col = 3) #mean
xfit <- seq(min(simulation$Mean), max(simulation$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 4, lty = 2)
legend('topright', c("Theoritical Values", "Simulation Values"),
bty = "n", lty = c(2,1), col = c(4, 1))
qqnorm(sim$Mean,
main ="Normal Q-Q Plot")
qqline(sim$Mean,
col = "3")
bty = "n", lty = c(2,1), col = c(4, 1))
qqnorm(simulation$Mean,
main ="Normal Distribution (Approximation)")
qqline(simulation$Mean,
col = "4")
qqnorm(simulation$Mean,
main ="Normal Distribution (Approximation)")
qqline(simulation$Mean,
col = "5")
dataset<-dataset(ToothGrowth)
dataset<-data(ToothGrowth)
head(dataset)
dataset
rm(dataset)
summary(ToothGrowth)
dataset<-ToothGrowth
?pointsjitter
?jitter
library(slidify)
library(shiny)
runExample("01_hello")
mkdir()
dir.create("Shiny_Project")
setwd("Shiny_Project/")
runApp("~/Shiny_Project/")
runApp("~/Shiny_Project/")
runApp("~/Shiny_Project/")
data(mtcars)
str(mtcars)
runApp("~/Shiny_Project/")
hist(mpg)
hist(mtcars$mpg)
hist(mtcars$mpg,mtcars$cyl)
plot(mtcars$mpg,mtcars$cyl)
qplot(mtcars$mpg,mtcars$cyl)
library(ggplot2)
qplot(mtcars$mpg,mtcars$cyl)
qplot(mtcars$mpg,mtcars$cyl|mtcars$disp)
qplot(mtcars$mpg,mtcars$cyl~,mtcars$disp)
qplot(mtcars$mpg,mtcars$cyl)
str(mtcars)
qplot(mtcars$hp,mtcars$mpg)
plot(mtcars$hp~mtcars$mpg)
plot(mtcars$hp,mtcars$mpg)
plot(mtcars$hp~mtcars$mpg)
plot(mtcars$hp~mtcars$mpg=100)
plot(mtcars$hp~mtcars$mpg)
qlot(mtcars$hp~mtcars$mpg)
qqplot(mtcars$hp~mtcars$mpg)
qplot(mtcars$hp~mtcars$mpg)
qplot(mtcars$hp,mtcars$mpg)
qplot(mtcars$mpg,mtcars$hp)
qplot(mtcars$mpg,mtcars$cyl)
qplot(mtcars$cyl,mtcars$mpg)
qplot(mtcars$mpg,mtcars$cyl)
boxplot(mtcars$mpg,mtcars$cyl)
boxplot(mtcars$hp,mtcars$mpg)
gplot(mtcars$hp,mtcars$mpg)
ggplot(mtcars$hp,mtcars$mpg)
qplot(mtcars$hp,mtcars$mpg)
geom_smooth()
qplot(mtcars$hp,mtcars$mpg) + geom_smooth()
lm(mtcars$hp~mtcars$hp)
lm(mtcars$hp-mtcars$hp)
lm(mtcars$hp,mtcars$hp)
lm(mtcars$hp~mtcars$hp)
runApp("~/Shiny_Project/")
runApp("~/Shiny_Project/")
runApp("~/Shiny_Project/")
runApp("~/Shiny_Project/")
runApp("~/Shiny_Project/")
